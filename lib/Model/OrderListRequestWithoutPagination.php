<?php
/**
 * OrderListRequestWithoutPagination
 *
 * PHP version 5
 *
 * @category Class
 * @package  IMN\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IMN  API
 *
 * # The REST API of IMN system  ## Overview  The REST APIs provide programmatic access to read and write IMN data.   Basically, with this API you will be able to do everything like you were with your browser on https://go.imn.io !    The main features are:  - Register and manage your merchant account  - Declare your source marketplace to get your offers  - Configure your marketplace api credential  - Define the target marketplaces you want to go to, then you will be able to configure:   - the pricing setting    - the shipping settings  - ...and more!      ## Things to keep in mind  ### API Rate Limits  - The IMN REST API is limited to 100 calls/minute.    ### Media type  The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.    ### Required content type  The required and default encoding for the request and responses is UTF8.    ### Required date time format  All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.    ### Base URL  The Base URL of the IMN API Order Management REST API conforms to the following template.    https://api.imn.io    All URLs returned by the IMN API are relative to this base URL, and all requests to the REST API must use this base URL template.    You can test our API on https://api-docs.imn.io/swagger-ui\\\\  You can contact us on [gitter, #IMN/API](https://gitter.im/IMN/API)
 *
 * OpenAPI spec version: 1.0
 * Contact: support@imn.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace IMN\Swagger\Client\Model;

use \ArrayAccess;
use \IMN\Swagger\Client\ObjectSerializer;

/**
 * OrderListRequestWithoutPagination Class Doc Comment
 *
 * @category Class
 * @package  IMN\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderListRequestWithoutPagination implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'orderListRequestWithoutPagination';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'marketplace_codes' => '\IMN\Swagger\Client\Model\MarketplaceCode[]',
        'late' => 'bool',
        'imn_order_statuses' => '\IMN\Swagger\Client\Model\ImnOrderStatus[]',
        'date_search_type' => '\IMN\Swagger\Client\Model\OrderDateSearchType',
        'begin_period_utc_date' => '\DateTime',
        'end_period_utc_date' => '\DateTime',
        'buyer_first_name' => '\IMN\Swagger\Client\Model\FirstName',
        'buyer_last_name' => '\IMN\Swagger\Client\Model\LastName',
        'marketplace_order_ids' => '\IMN\Swagger\Client\Model\MarketplaceOrderId[]',
        'merchant_order_ids' => '\IMN\Swagger\Client\Model\MerchantOrderId[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'marketplace_codes' => null,
        'late' => null,
        'imn_order_statuses' => null,
        'date_search_type' => null,
        'begin_period_utc_date' => 'date-time',
        'end_period_utc_date' => 'date-time',
        'buyer_first_name' => null,
        'buyer_last_name' => null,
        'marketplace_order_ids' => null,
        'merchant_order_ids' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'marketplace_codes' => 'marketplaceCodes',
        'late' => 'late',
        'imn_order_statuses' => 'imnOrderStatuses',
        'date_search_type' => 'dateSearchType',
        'begin_period_utc_date' => 'beginPeriodUtcDate',
        'end_period_utc_date' => 'endPeriodUtcDate',
        'buyer_first_name' => 'buyerFirstName',
        'buyer_last_name' => 'buyerLastName',
        'marketplace_order_ids' => 'marketplaceOrderIds',
        'merchant_order_ids' => 'merchantOrderIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'marketplace_codes' => 'setMarketplaceCodes',
        'late' => 'setLate',
        'imn_order_statuses' => 'setImnOrderStatuses',
        'date_search_type' => 'setDateSearchType',
        'begin_period_utc_date' => 'setBeginPeriodUtcDate',
        'end_period_utc_date' => 'setEndPeriodUtcDate',
        'buyer_first_name' => 'setBuyerFirstName',
        'buyer_last_name' => 'setBuyerLastName',
        'marketplace_order_ids' => 'setMarketplaceOrderIds',
        'merchant_order_ids' => 'setMerchantOrderIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'marketplace_codes' => 'getMarketplaceCodes',
        'late' => 'getLate',
        'imn_order_statuses' => 'getImnOrderStatuses',
        'date_search_type' => 'getDateSearchType',
        'begin_period_utc_date' => 'getBeginPeriodUtcDate',
        'end_period_utc_date' => 'getEndPeriodUtcDate',
        'buyer_first_name' => 'getBuyerFirstName',
        'buyer_last_name' => 'getBuyerLastName',
        'marketplace_order_ids' => 'getMarketplaceOrderIds',
        'merchant_order_ids' => 'getMerchantOrderIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['marketplace_codes'] = isset($data['marketplace_codes']) ? $data['marketplace_codes'] : null;
        $this->container['late'] = isset($data['late']) ? $data['late'] : null;
        $this->container['imn_order_statuses'] = isset($data['imn_order_statuses']) ? $data['imn_order_statuses'] : null;
        $this->container['date_search_type'] = isset($data['date_search_type']) ? $data['date_search_type'] : null;
        $this->container['begin_period_utc_date'] = isset($data['begin_period_utc_date']) ? $data['begin_period_utc_date'] : null;
        $this->container['end_period_utc_date'] = isset($data['end_period_utc_date']) ? $data['end_period_utc_date'] : null;
        $this->container['buyer_first_name'] = isset($data['buyer_first_name']) ? $data['buyer_first_name'] : null;
        $this->container['buyer_last_name'] = isset($data['buyer_last_name']) ? $data['buyer_last_name'] : null;
        $this->container['marketplace_order_ids'] = isset($data['marketplace_order_ids']) ? $data['marketplace_order_ids'] : null;
        $this->container['merchant_order_ids'] = isset($data['merchant_order_ids']) ? $data['merchant_order_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['date_search_type'] === null) {
            $invalidProperties[] = "'date_search_type' can't be null";
        }
        if ($this->container['begin_period_utc_date'] === null) {
            $invalidProperties[] = "'begin_period_utc_date' can't be null";
        }
        if ($this->container['end_period_utc_date'] === null) {
            $invalidProperties[] = "'end_period_utc_date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['date_search_type'] === null) {
            return false;
        }
        if ($this->container['begin_period_utc_date'] === null) {
            return false;
        }
        if ($this->container['end_period_utc_date'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets marketplace_codes
     *
     * @return \IMN\Swagger\Client\Model\MarketplaceCode[]
     */
    public function getMarketplaceCodes()
    {
        return $this->container['marketplace_codes'];
    }

    /**
     * Sets marketplace_codes
     *
     * @param \IMN\Swagger\Client\Model\MarketplaceCode[] $marketplace_codes marketplace_codes
     *
     * @return $this
     */
    public function setMarketplaceCodes($marketplace_codes)
    {
        $this->container['marketplace_codes'] = $marketplace_codes;

        return $this;
    }

    /**
     * Gets late
     *
     * @return bool
     */
    public function getLate()
    {
        return $this->container['late'];
    }

    /**
     * Sets late
     *
     * @param bool $late Looking for late orders
     *
     * @return $this
     */
    public function setLate($late)
    {
        $this->container['late'] = $late;

        return $this;
    }

    /**
     * Gets imn_order_statuses
     *
     * @return \IMN\Swagger\Client\Model\ImnOrderStatus[]
     */
    public function getImnOrderStatuses()
    {
        return $this->container['imn_order_statuses'];
    }

    /**
     * Sets imn_order_statuses
     *
     * @param \IMN\Swagger\Client\Model\ImnOrderStatus[] $imn_order_statuses imn_order_statuses
     *
     * @return $this
     */
    public function setImnOrderStatuses($imn_order_statuses)
    {
        $this->container['imn_order_statuses'] = $imn_order_statuses;

        return $this;
    }

    /**
     * Gets date_search_type
     *
     * @return \IMN\Swagger\Client\Model\OrderDateSearchType
     */
    public function getDateSearchType()
    {
        return $this->container['date_search_type'];
    }

    /**
     * Sets date_search_type
     *
     * @param \IMN\Swagger\Client\Model\OrderDateSearchType $date_search_type date_search_type
     *
     * @return $this
     */
    public function setDateSearchType($date_search_type)
    {
        $this->container['date_search_type'] = $date_search_type;

        return $this;
    }

    /**
     * Gets begin_period_utc_date
     *
     * @return \DateTime
     */
    public function getBeginPeriodUtcDate()
    {
        return $this->container['begin_period_utc_date'];
    }

    /**
     * Sets begin_period_utc_date
     *
     * @param \DateTime $begin_period_utc_date The begin period you want to make the search. \\ The period MUST not be greater than 30 days. The begin period MUST be lower than the end period.
     *
     * @return $this
     */
    public function setBeginPeriodUtcDate($begin_period_utc_date)
    {
        $this->container['begin_period_utc_date'] = $begin_period_utc_date;

        return $this;
    }

    /**
     * Gets end_period_utc_date
     *
     * @return \DateTime
     */
    public function getEndPeriodUtcDate()
    {
        return $this->container['end_period_utc_date'];
    }

    /**
     * Sets end_period_utc_date
     *
     * @param \DateTime $end_period_utc_date The end period of you search. \\ The period MUST not be greater than 30 days. \\ The end period MUST be greater than the begin period. The end period MUST be lower to the current date.
     *
     * @return $this
     */
    public function setEndPeriodUtcDate($end_period_utc_date)
    {
        $this->container['end_period_utc_date'] = $end_period_utc_date;

        return $this;
    }

    /**
     * Gets buyer_first_name
     *
     * @return \IMN\Swagger\Client\Model\FirstName
     */
    public function getBuyerFirstName()
    {
        return $this->container['buyer_first_name'];
    }

    /**
     * Sets buyer_first_name
     *
     * @param \IMN\Swagger\Client\Model\FirstName $buyer_first_name buyer_first_name
     *
     * @return $this
     */
    public function setBuyerFirstName($buyer_first_name)
    {
        $this->container['buyer_first_name'] = $buyer_first_name;

        return $this;
    }

    /**
     * Gets buyer_last_name
     *
     * @return \IMN\Swagger\Client\Model\LastName
     */
    public function getBuyerLastName()
    {
        return $this->container['buyer_last_name'];
    }

    /**
     * Sets buyer_last_name
     *
     * @param \IMN\Swagger\Client\Model\LastName $buyer_last_name buyer_last_name
     *
     * @return $this
     */
    public function setBuyerLastName($buyer_last_name)
    {
        $this->container['buyer_last_name'] = $buyer_last_name;

        return $this;
    }

    /**
     * Gets marketplace_order_ids
     *
     * @return \IMN\Swagger\Client\Model\MarketplaceOrderId[]
     */
    public function getMarketplaceOrderIds()
    {
        return $this->container['marketplace_order_ids'];
    }

    /**
     * Sets marketplace_order_ids
     *
     * @param \IMN\Swagger\Client\Model\MarketplaceOrderId[] $marketplace_order_ids marketplace_order_ids
     *
     * @return $this
     */
    public function setMarketplaceOrderIds($marketplace_order_ids)
    {
        $this->container['marketplace_order_ids'] = $marketplace_order_ids;

        return $this;
    }

    /**
     * Gets merchant_order_ids
     *
     * @return \IMN\Swagger\Client\Model\MerchantOrderId[]
     */
    public function getMerchantOrderIds()
    {
        return $this->container['merchant_order_ids'];
    }

    /**
     * Sets merchant_order_ids
     *
     * @param \IMN\Swagger\Client\Model\MerchantOrderId[] $merchant_order_ids Merchant order id list
     *
     * @return $this
     */
    public function setMerchantOrderIds($merchant_order_ids)
    {
        $this->container['merchant_order_ids'] = $merchant_order_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


