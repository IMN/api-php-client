<?php
/**
 * MerchantOrdersOrderApi
 * PHP version 5
 *
 * @category Class
 * @package  IMN\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IMN  API
 *
 * # The REST API of IMN system  ## Overview  The REST APIs provide programmatic access to read and write IMN data.   Basically, with this API you will be able to do everything like you were with your browser on https://go.imn.io !    The main features are:  - Register and manage your merchant account  - Declare your source marketplace to get your offers  - Configure your marketplace api credential  - Define the target marketplaces you want to go to, then you will be able to configure:   - the pricing setting    - the shipping settings  - ...and more!      ## Things to keep in mind  ### API Rate Limits  - The IMN REST API is limited to 100 calls/minute.    ### Media type  The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.    ### Required content type  The required and default encoding for the request and responses is UTF8.    ### Required date time format  All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.    ### Base URL  The Base URL of the IMN API Order Management REST API conforms to the following template.    https://api.imn.io    All URLs returned by the IMN API are relative to this base URL, and all requests to the REST API must use this base URL template.    You can test our API on https://api-docs.imn.io/swagger-ui\\\\  You can contact us on [gitter, #IMN/API](https://gitter.im/IMN/API)
 *
 * OpenAPI spec version: 1.0
 * Contact: support@imn.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace IMN\Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use IMN\Swagger\Client\ApiException;
use IMN\Swagger\Client\Configuration;
use IMN\Swagger\Client\HeaderSelector;
use IMN\Swagger\Client\ObjectSerializer;

/**
 * MerchantOrdersOrderApi Class Doc Comment
 *
 * @category Class
 * @package  IMN\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MerchantOrdersOrderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation acceptOrder
     *
     * Accept your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function acceptOrder($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode = 'false')
    {
        $this->acceptOrderWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode);
    }

    /**
     * Operation acceptOrderWithHttpInfo
     *
     * Accept your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptOrderWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode = 'false')
    {
        $returnType = '';
        $request = $this->acceptOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acceptOrderAsync
     *
     * Accept your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptOrderAsync($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode = 'false')
    {
        return $this->acceptOrderAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acceptOrderAsyncWithHttpInfo
     *
     * Accept your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptOrderAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode = 'false')
    {
        $returnType = '';
        $request = $this->acceptOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acceptOrder'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acceptOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode = 'false')
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling acceptOrder'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling acceptOrder'
            );
        }
        // verify the required parameter 'marketplace_order_id' is set
        if ($marketplace_order_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_order_id when calling acceptOrder'
            );
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling acceptOrder'
            );
        }
        // verify the required parameter 'if_match' is set
        if ($if_match === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $if_match when calling acceptOrder'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($test_mode !== null) {
            $queryParams['testMode'] = ObjectSerializer::toQueryValue($test_mode);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceOrderId' . '}',
                ObjectSerializer::toPathValue($marketplace_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelOrder
     *
     * Cancel your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  \IMN\Swagger\Client\Model\CancelOrderRequest $request request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelOrder($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $request, $test_mode = 'false')
    {
        $this->cancelOrderWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $request, $test_mode);
    }

    /**
     * Operation cancelOrderWithHttpInfo
     *
     * Cancel your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  \IMN\Swagger\Client\Model\CancelOrderRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelOrderWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $request, $test_mode = 'false')
    {
        $returnType = '';
        $request = $this->cancelOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $request, $test_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelOrderAsync
     *
     * Cancel your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  \IMN\Swagger\Client\Model\CancelOrderRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderAsync($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $request, $test_mode = 'false')
    {
        return $this->cancelOrderAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $request, $test_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelOrderAsyncWithHttpInfo
     *
     * Cancel your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  \IMN\Swagger\Client\Model\CancelOrderRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $request, $test_mode = 'false')
    {
        $returnType = '';
        $request = $this->cancelOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $request, $test_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelOrder'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  \IMN\Swagger\Client\Model\CancelOrderRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $request, $test_mode = 'false')
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling cancelOrder'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling cancelOrder'
            );
        }
        // verify the required parameter 'marketplace_order_id' is set
        if ($marketplace_order_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_order_id when calling cancelOrder'
            );
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling cancelOrder'
            );
        }
        // verify the required parameter 'if_match' is set
        if ($if_match === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $if_match when calling cancelOrder'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling cancelOrder'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($test_mode !== null) {
            $queryParams['testMode'] = ObjectSerializer::toQueryValue($test_mode);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceOrderId' . '}',
                ObjectSerializer::toPathValue($marketplace_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clearMerchantOrderInfo
     *
     * Clear an Order's merchant information
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function clearMerchantOrderInfo($merchant_code, $marketplace_code, $marketplace_order_id)
    {
        $this->clearMerchantOrderInfoWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id);
    }

    /**
     * Operation clearMerchantOrderInfoWithHttpInfo
     *
     * Clear an Order's merchant information
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function clearMerchantOrderInfoWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id)
    {
        $returnType = '';
        $request = $this->clearMerchantOrderInfoRequest($merchant_code, $marketplace_code, $marketplace_order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clearMerchantOrderInfoAsync
     *
     * Clear an Order's merchant information
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearMerchantOrderInfoAsync($merchant_code, $marketplace_code, $marketplace_order_id)
    {
        return $this->clearMerchantOrderInfoAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clearMerchantOrderInfoAsyncWithHttpInfo
     *
     * Clear an Order's merchant information
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearMerchantOrderInfoAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id)
    {
        $returnType = '';
        $request = $this->clearMerchantOrderInfoRequest($merchant_code, $marketplace_code, $marketplace_order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clearMerchantOrderInfo'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function clearMerchantOrderInfoRequest($merchant_code, $marketplace_code, $marketplace_order_id)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling clearMerchantOrderInfo'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling clearMerchantOrderInfo'
            );
        }
        // verify the required parameter 'marketplace_order_id' is set
        if ($marketplace_order_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_order_id when calling clearMerchantOrderInfo'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/clearMerchantOrderInfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceOrderId' . '}',
                ObjectSerializer::toPathValue($marketplace_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrder
     *
     * Get full Order and Order Item(s) properties
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (optional)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \IMN\Swagger\Client\Model\OrderIndex
     */
    public function getOrder($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match = null)
    {
        list($response) = $this->getOrderWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match);
        return $response;
    }

    /**
     * Operation getOrderWithHttpInfo
     *
     * Get full Order and Order Item(s) properties
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (optional)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \IMN\Swagger\Client\Model\OrderIndex, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match = null)
    {
        $returnType = '\IMN\Swagger\Client\Model\OrderIndex';
        $request = $this->getOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\OrderIndex',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderAsync
     *
     * Get full Order and Order Item(s) properties
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderAsync($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match = null)
    {
        return $this->getOrderAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderAsyncWithHttpInfo
     *
     * Get full Order and Order Item(s) properties
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match = null)
    {
        $returnType = '\IMN\Swagger\Client\Model\OrderIndex';
        $request = $this->getOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrder'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match = null)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling getOrder'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling getOrder'
            );
        }
        // verify the required parameter 'marketplace_order_id' is set
        if ($marketplace_order_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_order_id when calling getOrder'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceOrderId' . '}',
                ObjectSerializer::toPathValue($marketplace_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderHistory
     *
     * Get an Order's harvest and change history
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (optional)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \IMN\Swagger\Client\Model\OrderHistory
     */
    public function getOrderHistory($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match = null)
    {
        list($response) = $this->getOrderHistoryWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match);
        return $response;
    }

    /**
     * Operation getOrderHistoryWithHttpInfo
     *
     * Get an Order's harvest and change history
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (optional)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \IMN\Swagger\Client\Model\OrderHistory, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderHistoryWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match = null)
    {
        $returnType = '\IMN\Swagger\Client\Model\OrderHistory';
        $request = $this->getOrderHistoryRequest($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\OrderHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderHistoryAsync
     *
     * Get an Order's harvest and change history
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderHistoryAsync($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match = null)
    {
        return $this->getOrderHistoryAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderHistoryAsyncWithHttpInfo
     *
     * Get an Order's harvest and change history
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderHistoryAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match = null)
    {
        $returnType = '\IMN\Swagger\Client\Model\OrderHistory';
        $request = $this->getOrderHistoryRequest($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderHistory'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderHistoryRequest($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match = null)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling getOrderHistory'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling getOrderHistory'
            );
        }
        // verify the required parameter 'marketplace_order_id' is set
        if ($marketplace_order_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_order_id when calling getOrderHistory'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceOrderId' . '}',
                ObjectSerializer::toPathValue($marketplace_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation headOrder
     *
     * Get the meta information about the order (ETag, Last-Modified)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (optional)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function headOrder($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match = null)
    {
        $this->headOrderWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match);
    }

    /**
     * Operation headOrderWithHttpInfo
     *
     * Get the meta information about the order (ETag, Last-Modified)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (optional)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function headOrderWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match = null)
    {
        $returnType = '';
        $request = $this->headOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation headOrderAsync
     *
     * Get the meta information about the order (ETag, Last-Modified)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function headOrderAsync($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match = null)
    {
        return $this->headOrderAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation headOrderAsyncWithHttpInfo
     *
     * Get the meta information about the order (ETag, Last-Modified)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function headOrderAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match = null)
    {
        $returnType = '';
        $request = $this->headOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'headOrder'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $if_none_match ETag value to identify the last known version of requested resource.\\ To avoid useless exchange, we recommend you to indicate the ETag you previously got from this operation.\\ If the ETag value does not match the response will be 200 to give you a new content, otherwise the response will be: 304 Not Modified, without any content.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function headOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $if_none_match = null)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling headOrder'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling headOrder'
            );
        }
        // verify the required parameter 'marketplace_order_id' is set
        if ($marketplace_order_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_order_id when calling headOrder'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($if_none_match !== null) {
            $headerParams['If-None-Match'] = ObjectSerializer::toHeaderValue($if_none_match);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceOrderId' . '}',
                ObjectSerializer::toPathValue($marketplace_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'HEAD',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundOrder
     *
     * Refund your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\RefundOrderRequest $request request (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function refundOrder($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode = 'false')
    {
        $this->refundOrderWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode);
    }

    /**
     * Operation refundOrderWithHttpInfo
     *
     * Refund your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\RefundOrderRequest $request (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundOrderWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode = 'false')
    {
        $returnType = '';
        $request = $this->refundOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refundOrderAsync
     *
     * Refund your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\RefundOrderRequest $request (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundOrderAsync($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode = 'false')
    {
        return $this->refundOrderAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundOrderAsyncWithHttpInfo
     *
     * Refund your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\RefundOrderRequest $request (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundOrderAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode = 'false')
    {
        $returnType = '';
        $request = $this->refundOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundOrder'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\RefundOrderRequest $request (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refundOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode = 'false')
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling refundOrder'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling refundOrder'
            );
        }
        // verify the required parameter 'marketplace_order_id' is set
        if ($marketplace_order_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_order_id when calling refundOrder'
            );
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling refundOrder'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling refundOrder'
            );
        }
        // verify the required parameter 'if_match' is set
        if ($if_match === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $if_match when calling refundOrder'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($test_mode !== null) {
            $queryParams['testMode'] = ObjectSerializer::toQueryValue($test_mode);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceOrderId' . '}',
                ObjectSerializer::toPathValue($marketplace_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refuseOrder
     *
     * Refuse your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function refuseOrder($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode = 'false')
    {
        $this->refuseOrderWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode);
    }

    /**
     * Operation refuseOrderWithHttpInfo
     *
     * Refuse your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function refuseOrderWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode = 'false')
    {
        $returnType = '';
        $request = $this->refuseOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refuseOrderAsync
     *
     * Refuse your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refuseOrderAsync($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode = 'false')
    {
        return $this->refuseOrderAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refuseOrderAsyncWithHttpInfo
     *
     * Refuse your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refuseOrderAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode = 'false')
    {
        $returnType = '';
        $request = $this->refuseOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refuseOrder'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refuseOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $if_match, $test_mode = 'false')
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling refuseOrder'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling refuseOrder'
            );
        }
        // verify the required parameter 'marketplace_order_id' is set
        if ($marketplace_order_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_order_id when calling refuseOrder'
            );
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling refuseOrder'
            );
        }
        // verify the required parameter 'if_match' is set
        if ($if_match === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $if_match when calling refuseOrder'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/refuse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($test_mode !== null) {
            $queryParams['testMode'] = ObjectSerializer::toQueryValue($test_mode);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceOrderId' . '}',
                ObjectSerializer::toPathValue($marketplace_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setMerchantOrderInfo
     *
     * Set an Order's merchant information
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  \IMN\Swagger\Client\Model\SetMerchantOrderInfoRequest $request request (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function setMerchantOrderInfo($merchant_code, $marketplace_code, $marketplace_order_id, $request)
    {
        $this->setMerchantOrderInfoWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $request);
    }

    /**
     * Operation setMerchantOrderInfoWithHttpInfo
     *
     * Set an Order's merchant information
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  \IMN\Swagger\Client\Model\SetMerchantOrderInfoRequest $request (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function setMerchantOrderInfoWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $request)
    {
        $returnType = '';
        $request = $this->setMerchantOrderInfoRequest($merchant_code, $marketplace_code, $marketplace_order_id, $request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setMerchantOrderInfoAsync
     *
     * Set an Order's merchant information
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  \IMN\Swagger\Client\Model\SetMerchantOrderInfoRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setMerchantOrderInfoAsync($merchant_code, $marketplace_code, $marketplace_order_id, $request)
    {
        return $this->setMerchantOrderInfoAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setMerchantOrderInfoAsyncWithHttpInfo
     *
     * Set an Order's merchant information
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  \IMN\Swagger\Client\Model\SetMerchantOrderInfoRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setMerchantOrderInfoAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $request)
    {
        $returnType = '';
        $request = $this->setMerchantOrderInfoRequest($merchant_code, $marketplace_code, $marketplace_order_id, $request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setMerchantOrderInfo'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  \IMN\Swagger\Client\Model\SetMerchantOrderInfoRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setMerchantOrderInfoRequest($merchant_code, $marketplace_code, $marketplace_order_id, $request)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling setMerchantOrderInfo'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling setMerchantOrderInfo'
            );
        }
        // verify the required parameter 'marketplace_order_id' is set
        if ($marketplace_order_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_order_id when calling setMerchantOrderInfo'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling setMerchantOrderInfo'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/setMerchantOrderInfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceOrderId' . '}',
                ObjectSerializer::toPathValue($marketplace_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipOrder
     *
     * Ship your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderRequest $request request (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipOrder($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode = 'false')
    {
        $this->shipOrderWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode);
    }

    /**
     * Operation shipOrderWithHttpInfo
     *
     * Ship your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderRequest $request (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipOrderWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode = 'false')
    {
        $returnType = '';
        $request = $this->shipOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipOrderAsync
     *
     * Ship your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderRequest $request (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipOrderAsync($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode = 'false')
    {
        return $this->shipOrderAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipOrderAsyncWithHttpInfo
     *
     * Ship your marketplace order
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderRequest $request (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipOrderAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode = 'false')
    {
        $returnType = '';
        $request = $this->shipOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipOrder'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderRequest $request (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipOrderRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode = 'false')
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling shipOrder'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling shipOrder'
            );
        }
        // verify the required parameter 'marketplace_order_id' is set
        if ($marketplace_order_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_order_id when calling shipOrder'
            );
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling shipOrder'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling shipOrder'
            );
        }
        // verify the required parameter 'if_match' is set
        if ($if_match === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $if_match when calling shipOrder'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/ship';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($test_mode !== null) {
            $queryParams['testMode'] = ObjectSerializer::toQueryValue($test_mode);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceOrderId' . '}',
                ObjectSerializer::toPathValue($marketplace_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipOrderWithTrackingUrl
     *
     * Ship your marketplace order with tracking url
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderWithTrackingUrlRequest $request request (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function shipOrderWithTrackingUrl($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode = 'false')
    {
        $this->shipOrderWithTrackingUrlWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode);
    }

    /**
     * Operation shipOrderWithTrackingUrlWithHttpInfo
     *
     * Ship your marketplace order with tracking url
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderWithTrackingUrlRequest $request (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipOrderWithTrackingUrlWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode = 'false')
    {
        $returnType = '';
        $request = $this->shipOrderWithTrackingUrlRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipOrderWithTrackingUrlAsync
     *
     * Ship your marketplace order with tracking url
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderWithTrackingUrlRequest $request (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipOrderWithTrackingUrlAsync($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode = 'false')
    {
        return $this->shipOrderWithTrackingUrlAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipOrderWithTrackingUrlAsyncWithHttpInfo
     *
     * Ship your marketplace order with tracking url
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderWithTrackingUrlRequest $request (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipOrderWithTrackingUrlAsyncWithHttpInfo($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode = 'false')
    {
        $returnType = '';
        $request = $this->shipOrderWithTrackingUrlRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipOrderWithTrackingUrl'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     * @param  string $marketplace_order_id The MKP Order identifier (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderWithTrackingUrlRequest $request (required)
     * @param  string $if_match ETag value to identify the last known version of requested resource.\\ To ensure that you are making a change on the lastest version of the resource.\\ For more details go to this link: http://tools.ietf.org/html/rfc7232#section-2.3 (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipOrderWithTrackingUrlRequest($merchant_code, $marketplace_code, $marketplace_order_id, $user_name, $request, $if_match, $test_mode = 'false')
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling shipOrderWithTrackingUrl'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling shipOrderWithTrackingUrl'
            );
        }
        // verify the required parameter 'marketplace_order_id' is set
        if ($marketplace_order_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_order_id when calling shipOrderWithTrackingUrl'
            );
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling shipOrderWithTrackingUrl'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling shipOrderWithTrackingUrl'
            );
        }
        // verify the required parameter 'if_match' is set
        if ($if_match === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $if_match when calling shipOrderWithTrackingUrl'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/{marketplaceCode}/{marketplaceOrderId}/shipWithTrackingUrl';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($test_mode !== null) {
            $queryParams['testMode'] = ObjectSerializer::toQueryValue($test_mode);
        }
        // header params
        if ($if_match !== null) {
            $headerParams['If-Match'] = ObjectSerializer::toHeaderValue($if_match);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceOrderId' . '}',
                ObjectSerializer::toPathValue($marketplace_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
