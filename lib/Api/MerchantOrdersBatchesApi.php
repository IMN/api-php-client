<?php
/**
 * MerchantOrdersBatchesApi
 * PHP version 5
 *
 * @category Class
 * @package  IMN\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IMN  API
 *
 * # The REST API of IMN system  ## Overview  The REST APIs provide programmatic access to read and write IMN data.   Basically, with this API you will be able to do everything like you were with your browser on https://go.imn.io !    The main features are:  - Register and manage your merchant account  - Declare your source marketplace to get your offers  - Configure your marketplace api credential  - Define the target marketplaces you want to go to, then you will be able to configure:   - the pricing setting    - the shipping settings  - ...and more!      ## Things to keep in mind  ### API Rate Limits  - The IMN REST API is limited to 100 calls/minute.    ### Media type  The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.    ### Required content type  The required and default encoding for the request and responses is UTF8.    ### Required date time format  All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.    ### Base URL  The Base URL of the IMN API Order Management REST API conforms to the following template.    https://api.imn.io    All URLs returned by the IMN API are relative to this base URL, and all requests to the REST API must use this base URL template.    You can test our API on https://api-docs.imn.io/swagger-ui\\\\  You can contact us on [gitter, #IMN/API](https://gitter.im/IMN/API)
 *
 * OpenAPI spec version: 1.0
 * Contact: support@imn.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace IMN\Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use IMN\Swagger\Client\ApiException;
use IMN\Swagger\Client\Configuration;
use IMN\Swagger\Client\HeaderSelector;
use IMN\Swagger\Client\ObjectSerializer;

/**
 * MerchantOrdersBatchesApi Class Doc Comment
 *
 * @category Class
 * @package  IMN\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MerchantOrdersBatchesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation acceptOrderList
     *
     * Accept multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\AcceptOrderListRequest $request request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \IMN\Swagger\Client\Model\BatchOrderOperationResponse
     */
    public function acceptOrderList($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        list($response) = $this->acceptOrderListWithHttpInfo($merchant_code, $user_name, $request, $test_mode);
        return $response;
    }

    /**
     * Operation acceptOrderListWithHttpInfo
     *
     * Accept multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\AcceptOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \IMN\Swagger\Client\Model\BatchOrderOperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptOrderListWithHttpInfo($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        $returnType = '\IMN\Swagger\Client\Model\BatchOrderOperationResponse';
        $request = $this->acceptOrderListRequest($merchant_code, $user_name, $request, $test_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\BatchOrderOperationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acceptOrderListAsync
     *
     * Accept multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\AcceptOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptOrderListAsync($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        return $this->acceptOrderListAsyncWithHttpInfo($merchant_code, $user_name, $request, $test_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acceptOrderListAsyncWithHttpInfo
     *
     * Accept multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\AcceptOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptOrderListAsyncWithHttpInfo($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        $returnType = '\IMN\Swagger\Client\Model\BatchOrderOperationResponse';
        $request = $this->acceptOrderListRequest($merchant_code, $user_name, $request, $test_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acceptOrderList'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\AcceptOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function acceptOrderListRequest($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling acceptOrderList'
            );
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling acceptOrderList'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling acceptOrderList'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/batches/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($test_mode !== null) {
            $queryParams['testMode'] = ObjectSerializer::toQueryValue($test_mode);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelOrderList
     *
     * Cancel multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\CancelOrderListRequest $request request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \IMN\Swagger\Client\Model\BatchOrderOperationResponse
     */
    public function cancelOrderList($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        list($response) = $this->cancelOrderListWithHttpInfo($merchant_code, $user_name, $request, $test_mode);
        return $response;
    }

    /**
     * Operation cancelOrderListWithHttpInfo
     *
     * Cancel multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\CancelOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \IMN\Swagger\Client\Model\BatchOrderOperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelOrderListWithHttpInfo($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        $returnType = '\IMN\Swagger\Client\Model\BatchOrderOperationResponse';
        $request = $this->cancelOrderListRequest($merchant_code, $user_name, $request, $test_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\BatchOrderOperationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelOrderListAsync
     *
     * Cancel multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\CancelOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderListAsync($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        return $this->cancelOrderListAsyncWithHttpInfo($merchant_code, $user_name, $request, $test_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelOrderListAsyncWithHttpInfo
     *
     * Cancel multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\CancelOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelOrderListAsyncWithHttpInfo($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        $returnType = '\IMN\Swagger\Client\Model\BatchOrderOperationResponse';
        $request = $this->cancelOrderListRequest($merchant_code, $user_name, $request, $test_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelOrderList'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\CancelOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelOrderListRequest($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling cancelOrderList'
            );
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling cancelOrderList'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling cancelOrderList'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/batches/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($test_mode !== null) {
            $queryParams['testMode'] = ObjectSerializer::toQueryValue($test_mode);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation clearMerchantOrderInfoList
     *
     * Send a batch of operations to clear an Order's merchant information (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  \IMN\Swagger\Client\Model\ClearMerchantOrderInfoListRequest $request request (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \IMN\Swagger\Client\Model\BatchOrderOperationResponse
     */
    public function clearMerchantOrderInfoList($merchant_code, $request)
    {
        list($response) = $this->clearMerchantOrderInfoListWithHttpInfo($merchant_code, $request);
        return $response;
    }

    /**
     * Operation clearMerchantOrderInfoListWithHttpInfo
     *
     * Send a batch of operations to clear an Order's merchant information (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  \IMN\Swagger\Client\Model\ClearMerchantOrderInfoListRequest $request (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \IMN\Swagger\Client\Model\BatchOrderOperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function clearMerchantOrderInfoListWithHttpInfo($merchant_code, $request)
    {
        $returnType = '\IMN\Swagger\Client\Model\BatchOrderOperationResponse';
        $request = $this->clearMerchantOrderInfoListRequest($merchant_code, $request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\BatchOrderOperationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation clearMerchantOrderInfoListAsync
     *
     * Send a batch of operations to clear an Order's merchant information (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  \IMN\Swagger\Client\Model\ClearMerchantOrderInfoListRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearMerchantOrderInfoListAsync($merchant_code, $request)
    {
        return $this->clearMerchantOrderInfoListAsyncWithHttpInfo($merchant_code, $request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation clearMerchantOrderInfoListAsyncWithHttpInfo
     *
     * Send a batch of operations to clear an Order's merchant information (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  \IMN\Swagger\Client\Model\ClearMerchantOrderInfoListRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function clearMerchantOrderInfoListAsyncWithHttpInfo($merchant_code, $request)
    {
        $returnType = '\IMN\Swagger\Client\Model\BatchOrderOperationResponse';
        $request = $this->clearMerchantOrderInfoListRequest($merchant_code, $request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'clearMerchantOrderInfoList'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  \IMN\Swagger\Client\Model\ClearMerchantOrderInfoListRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function clearMerchantOrderInfoListRequest($merchant_code, $request)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling clearMerchantOrderInfoList'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling clearMerchantOrderInfoList'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/batches/clearMerchantOrderInfos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundOrderList
     *
     * Refund multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\RefundOrderListRequest $request request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \IMN\Swagger\Client\Model\BatchOrderOperationResponse
     */
    public function refundOrderList($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        list($response) = $this->refundOrderListWithHttpInfo($merchant_code, $user_name, $request, $test_mode);
        return $response;
    }

    /**
     * Operation refundOrderListWithHttpInfo
     *
     * Refund multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\RefundOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \IMN\Swagger\Client\Model\BatchOrderOperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundOrderListWithHttpInfo($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        $returnType = '\IMN\Swagger\Client\Model\BatchOrderOperationResponse';
        $request = $this->refundOrderListRequest($merchant_code, $user_name, $request, $test_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\BatchOrderOperationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refundOrderListAsync
     *
     * Refund multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\RefundOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundOrderListAsync($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        return $this->refundOrderListAsyncWithHttpInfo($merchant_code, $user_name, $request, $test_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundOrderListAsyncWithHttpInfo
     *
     * Refund multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\RefundOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundOrderListAsyncWithHttpInfo($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        $returnType = '\IMN\Swagger\Client\Model\BatchOrderOperationResponse';
        $request = $this->refundOrderListRequest($merchant_code, $user_name, $request, $test_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundOrderList'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\RefundOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refundOrderListRequest($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling refundOrderList'
            );
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling refundOrderList'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling refundOrderList'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/batches/refund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($test_mode !== null) {
            $queryParams['testMode'] = ObjectSerializer::toQueryValue($test_mode);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refuseOrderList
     *
     * Refuse multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\RefuseOrderListRequest $request request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \IMN\Swagger\Client\Model\BatchOrderOperationResponse
     */
    public function refuseOrderList($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        list($response) = $this->refuseOrderListWithHttpInfo($merchant_code, $user_name, $request, $test_mode);
        return $response;
    }

    /**
     * Operation refuseOrderListWithHttpInfo
     *
     * Refuse multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\RefuseOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \IMN\Swagger\Client\Model\BatchOrderOperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function refuseOrderListWithHttpInfo($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        $returnType = '\IMN\Swagger\Client\Model\BatchOrderOperationResponse';
        $request = $this->refuseOrderListRequest($merchant_code, $user_name, $request, $test_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\BatchOrderOperationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refuseOrderListAsync
     *
     * Refuse multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\RefuseOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refuseOrderListAsync($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        return $this->refuseOrderListAsyncWithHttpInfo($merchant_code, $user_name, $request, $test_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refuseOrderListAsyncWithHttpInfo
     *
     * Refuse multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\RefuseOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refuseOrderListAsyncWithHttpInfo($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        $returnType = '\IMN\Swagger\Client\Model\BatchOrderOperationResponse';
        $request = $this->refuseOrderListRequest($merchant_code, $user_name, $request, $test_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refuseOrderList'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\RefuseOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refuseOrderListRequest($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling refuseOrderList'
            );
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling refuseOrderList'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling refuseOrderList'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/batches/refuse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($test_mode !== null) {
            $queryParams['testMode'] = ObjectSerializer::toQueryValue($test_mode);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation setMerchantOrderInfoList
     *
     * Send a batch of operations to set an Order's merchant information  (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  \IMN\Swagger\Client\Model\SetMerchantOrderInfoListRequest $request request (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \IMN\Swagger\Client\Model\BatchOrderOperationResponse
     */
    public function setMerchantOrderInfoList($merchant_code, $request)
    {
        list($response) = $this->setMerchantOrderInfoListWithHttpInfo($merchant_code, $request);
        return $response;
    }

    /**
     * Operation setMerchantOrderInfoListWithHttpInfo
     *
     * Send a batch of operations to set an Order's merchant information  (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  \IMN\Swagger\Client\Model\SetMerchantOrderInfoListRequest $request (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \IMN\Swagger\Client\Model\BatchOrderOperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function setMerchantOrderInfoListWithHttpInfo($merchant_code, $request)
    {
        $returnType = '\IMN\Swagger\Client\Model\BatchOrderOperationResponse';
        $request = $this->setMerchantOrderInfoListRequest($merchant_code, $request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\BatchOrderOperationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation setMerchantOrderInfoListAsync
     *
     * Send a batch of operations to set an Order's merchant information  (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  \IMN\Swagger\Client\Model\SetMerchantOrderInfoListRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setMerchantOrderInfoListAsync($merchant_code, $request)
    {
        return $this->setMerchantOrderInfoListAsyncWithHttpInfo($merchant_code, $request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation setMerchantOrderInfoListAsyncWithHttpInfo
     *
     * Send a batch of operations to set an Order's merchant information  (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  \IMN\Swagger\Client\Model\SetMerchantOrderInfoListRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function setMerchantOrderInfoListAsyncWithHttpInfo($merchant_code, $request)
    {
        $returnType = '\IMN\Swagger\Client\Model\BatchOrderOperationResponse';
        $request = $this->setMerchantOrderInfoListRequest($merchant_code, $request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'setMerchantOrderInfoList'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  \IMN\Swagger\Client\Model\SetMerchantOrderInfoListRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function setMerchantOrderInfoListRequest($merchant_code, $request)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling setMerchantOrderInfoList'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling setMerchantOrderInfoList'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/batches/setMerchantOrderInfos';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipOrderList
     *
     * Ship multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderListRequest $request request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \IMN\Swagger\Client\Model\BatchOrderOperationResponse
     */
    public function shipOrderList($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        list($response) = $this->shipOrderListWithHttpInfo($merchant_code, $user_name, $request, $test_mode);
        return $response;
    }

    /**
     * Operation shipOrderListWithHttpInfo
     *
     * Ship multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \IMN\Swagger\Client\Model\BatchOrderOperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipOrderListWithHttpInfo($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        $returnType = '\IMN\Swagger\Client\Model\BatchOrderOperationResponse';
        $request = $this->shipOrderListRequest($merchant_code, $user_name, $request, $test_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\BatchOrderOperationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipOrderListAsync
     *
     * Ship multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipOrderListAsync($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        return $this->shipOrderListAsyncWithHttpInfo($merchant_code, $user_name, $request, $test_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipOrderListAsyncWithHttpInfo
     *
     * Ship multiple marketplace orders in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipOrderListAsyncWithHttpInfo($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        $returnType = '\IMN\Swagger\Client\Model\BatchOrderOperationResponse';
        $request = $this->shipOrderListRequest($merchant_code, $user_name, $request, $test_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipOrderList'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipOrderListRequest($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling shipOrderList'
            );
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling shipOrderList'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling shipOrderList'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/batches/ship';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($test_mode !== null) {
            $queryParams['testMode'] = ObjectSerializer::toQueryValue($test_mode);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation shipOrderListWithTrackUrl
     *
     * Ship multiple marketplace orders with tracking url in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderWithTrackingUrlListRequest $request request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \IMN\Swagger\Client\Model\BatchOrderOperationResponse
     */
    public function shipOrderListWithTrackUrl($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        list($response) = $this->shipOrderListWithTrackUrlWithHttpInfo($merchant_code, $user_name, $request, $test_mode);
        return $response;
    }

    /**
     * Operation shipOrderListWithTrackUrlWithHttpInfo
     *
     * Ship multiple marketplace orders with tracking url in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderWithTrackingUrlListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \IMN\Swagger\Client\Model\BatchOrderOperationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function shipOrderListWithTrackUrlWithHttpInfo($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        $returnType = '\IMN\Swagger\Client\Model\BatchOrderOperationResponse';
        $request = $this->shipOrderListWithTrackUrlRequest($merchant_code, $user_name, $request, $test_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\BatchOrderOperationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation shipOrderListWithTrackUrlAsync
     *
     * Ship multiple marketplace orders with tracking url in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderWithTrackingUrlListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipOrderListWithTrackUrlAsync($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        return $this->shipOrderListWithTrackUrlAsyncWithHttpInfo($merchant_code, $user_name, $request, $test_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation shipOrderListWithTrackUrlAsyncWithHttpInfo
     *
     * Ship multiple marketplace orders with tracking url in one operation (max 100 items per call)
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderWithTrackingUrlListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function shipOrderListWithTrackUrlAsyncWithHttpInfo($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        $returnType = '\IMN\Swagger\Client\Model\BatchOrderOperationResponse';
        $request = $this->shipOrderListWithTrackUrlRequest($merchant_code, $user_name, $request, $test_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'shipOrderListWithTrackUrl'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $user_name Sometimes the user in the e-commerce application is not the same as user associated with the current subscription key. We recommend providing your application&#39;s user login. (required)
     * @param  \IMN\Swagger\Client\Model\ShipOrderWithTrackingUrlListRequest $request (required)
     * @param  bool $test_mode If true, the operation will be not be sent to marketplace. But the validation will be taken in account. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function shipOrderListWithTrackUrlRequest($merchant_code, $user_name, $request, $test_mode = 'false')
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling shipOrderListWithTrackUrl'
            );
        }
        // verify the required parameter 'user_name' is set
        if ($user_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling shipOrderListWithTrackUrl'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling shipOrderListWithTrackUrl'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/batches/shipWithTrackingUrl';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_name !== null) {
            $queryParams['userName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($test_mode !== null) {
            $queryParams['testMode'] = ObjectSerializer::toQueryValue($test_mode);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
