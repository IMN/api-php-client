<?php
/**
 * MerchantAPIMarketplacesActivationApi
 * PHP version 5
 *
 * @category Class
 * @package  IMN\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IMN  API
 *
 * # The REST API of IMN system  ## Overview  The REST APIs provide programmatic access to read and write IMN data.   Basically, with this API you will be able to do everything like you were with your browser on https://go.imn.io !    The main features are:  - Register and manage your merchant account  - Declare your source marketplace to get your offers  - Configure your marketplace api credential  - Define the target marketplaces you want to go to, then you will be able to configure:   - the pricing setting    - the shipping settings  - ...and more!      ## Things to keep in mind  ### API Rate Limits  - The IMN REST API is limited to 100 calls/minute.    ### Media type  The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.    ### Required content type  The required and default encoding for the request and responses is UTF8.    ### Required date time format  All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.    ### Base URL  The Base URL of the IMN API Order Management REST API conforms to the following template.    https://api.imn.io    All URLs returned by the IMN API are relative to this base URL, and all requests to the REST API must use this base URL template.    You can test our API on https://api-docs.imn.io/swagger-ui\\\\  You can contact us on [gitter, #IMN/API](https://gitter.im/IMN/API)
 *
 * OpenAPI spec version: 1.0
 * Contact: support@imn.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace IMN\Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use IMN\Swagger\Client\ApiException;
use IMN\Swagger\Client\Configuration;
use IMN\Swagger\Client\HeaderSelector;
use IMN\Swagger\Client\ObjectSerializer;

/**
 * MerchantAPIMarketplacesActivationApi Class Doc Comment
 *
 * @category Class
 * @package  IMN\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MerchantAPIMarketplacesActivationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation declareSourceMarketplace
     *
     * Declare this marketplace as source of the offers
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function declareSourceMarketplace($merchant_code, $marketplace_code)
    {
        $this->declareSourceMarketplaceWithHttpInfo($merchant_code, $marketplace_code);
    }

    /**
     * Operation declareSourceMarketplaceWithHttpInfo
     *
     * Declare this marketplace as source of the offers
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function declareSourceMarketplaceWithHttpInfo($merchant_code, $marketplace_code)
    {
        $returnType = '';
        $request = $this->declareSourceMarketplaceRequest($merchant_code, $marketplace_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation declareSourceMarketplaceAsync
     *
     * Declare this marketplace as source of the offers
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function declareSourceMarketplaceAsync($merchant_code, $marketplace_code)
    {
        return $this->declareSourceMarketplaceAsyncWithHttpInfo($merchant_code, $marketplace_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation declareSourceMarketplaceAsyncWithHttpInfo
     *
     * Declare this marketplace as source of the offers
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function declareSourceMarketplaceAsyncWithHttpInfo($merchant_code, $marketplace_code)
    {
        $returnType = '';
        $request = $this->declareSourceMarketplaceRequest($merchant_code, $marketplace_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'declareSourceMarketplace'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function declareSourceMarketplaceRequest($merchant_code, $marketplace_code)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling declareSourceMarketplace'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling declareSourceMarketplace'
            );
        }

        $resourcePath = '/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/declareOffersSource';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation disableMarketplace
     *
     * Disable offers publication & order management for this marketplace
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function disableMarketplace($merchant_code, $marketplace_code)
    {
        $this->disableMarketplaceWithHttpInfo($merchant_code, $marketplace_code);
    }

    /**
     * Operation disableMarketplaceWithHttpInfo
     *
     * Disable offers publication & order management for this marketplace
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function disableMarketplaceWithHttpInfo($merchant_code, $marketplace_code)
    {
        $returnType = '';
        $request = $this->disableMarketplaceRequest($merchant_code, $marketplace_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation disableMarketplaceAsync
     *
     * Disable offers publication & order management for this marketplace
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disableMarketplaceAsync($merchant_code, $marketplace_code)
    {
        return $this->disableMarketplaceAsyncWithHttpInfo($merchant_code, $marketplace_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation disableMarketplaceAsyncWithHttpInfo
     *
     * Disable offers publication & order management for this marketplace
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disableMarketplaceAsyncWithHttpInfo($merchant_code, $marketplace_code)
    {
        $returnType = '';
        $request = $this->disableMarketplaceRequest($merchant_code, $marketplace_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'disableMarketplace'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function disableMarketplaceRequest($merchant_code, $marketplace_code)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling disableMarketplace'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling disableMarketplace'
            );
        }

        $resourcePath = '/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation disableOrderImportation
     *
     * Disable order importation for this marketplace
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function disableOrderImportation($merchant_code, $marketplace_code)
    {
        $this->disableOrderImportationWithHttpInfo($merchant_code, $marketplace_code);
    }

    /**
     * Operation disableOrderImportationWithHttpInfo
     *
     * Disable order importation for this marketplace
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function disableOrderImportationWithHttpInfo($merchant_code, $marketplace_code)
    {
        $returnType = '';
        $request = $this->disableOrderImportationRequest($merchant_code, $marketplace_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation disableOrderImportationAsync
     *
     * Disable order importation for this marketplace
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disableOrderImportationAsync($merchant_code, $marketplace_code)
    {
        return $this->disableOrderImportationAsyncWithHttpInfo($merchant_code, $marketplace_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation disableOrderImportationAsyncWithHttpInfo
     *
     * Disable order importation for this marketplace
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disableOrderImportationAsyncWithHttpInfo($merchant_code, $marketplace_code)
    {
        $returnType = '';
        $request = $this->disableOrderImportationRequest($merchant_code, $marketplace_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'disableOrderImportation'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function disableOrderImportationRequest($merchant_code, $marketplace_code)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling disableOrderImportation'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling disableOrderImportation'
            );
        }

        $resourcePath = '/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/disableOrderImportation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enableMarketplace
     *
     * Enable offers publication & order management for this marketplace
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function enableMarketplace($merchant_code, $marketplace_code)
    {
        $this->enableMarketplaceWithHttpInfo($merchant_code, $marketplace_code);
    }

    /**
     * Operation enableMarketplaceWithHttpInfo
     *
     * Enable offers publication & order management for this marketplace
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function enableMarketplaceWithHttpInfo($merchant_code, $marketplace_code)
    {
        $returnType = '';
        $request = $this->enableMarketplaceRequest($merchant_code, $marketplace_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\UserErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\UserErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation enableMarketplaceAsync
     *
     * Enable offers publication & order management for this marketplace
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enableMarketplaceAsync($merchant_code, $marketplace_code)
    {
        return $this->enableMarketplaceAsyncWithHttpInfo($merchant_code, $marketplace_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enableMarketplaceAsyncWithHttpInfo
     *
     * Enable offers publication & order management for this marketplace
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enableMarketplaceAsyncWithHttpInfo($merchant_code, $marketplace_code)
    {
        $returnType = '';
        $request = $this->enableMarketplaceRequest($merchant_code, $marketplace_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enableMarketplace'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function enableMarketplaceRequest($merchant_code, $marketplace_code)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling enableMarketplace'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling enableMarketplace'
            );
        }

        $resourcePath = '/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reenableOrderImportation
     *
     * Reenable order importation for this marketplace
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function reenableOrderImportation($merchant_code, $marketplace_code)
    {
        $this->reenableOrderImportationWithHttpInfo($merchant_code, $marketplace_code);
    }

    /**
     * Operation reenableOrderImportationWithHttpInfo
     *
     * Reenable order importation for this marketplace
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reenableOrderImportationWithHttpInfo($merchant_code, $marketplace_code)
    {
        $returnType = '';
        $request = $this->reenableOrderImportationRequest($merchant_code, $marketplace_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\UserErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\UserErrorMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reenableOrderImportationAsync
     *
     * Reenable order importation for this marketplace
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reenableOrderImportationAsync($merchant_code, $marketplace_code)
    {
        return $this->reenableOrderImportationAsyncWithHttpInfo($merchant_code, $marketplace_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reenableOrderImportationAsyncWithHttpInfo
     *
     * Reenable order importation for this marketplace
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reenableOrderImportationAsyncWithHttpInfo($merchant_code, $marketplace_code)
    {
        $returnType = '';
        $request = $this->reenableOrderImportationRequest($merchant_code, $marketplace_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reenableOrderImportation'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function reenableOrderImportationRequest($merchant_code, $marketplace_code)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling reenableOrderImportation'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling reenableOrderImportation'
            );
        }

        $resourcePath = '/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/reenableOrderImportation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation undeclareSourceMarketplace
     *
     * Undeclare this marketplace as source of the offers
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function undeclareSourceMarketplace($merchant_code, $marketplace_code)
    {
        $this->undeclareSourceMarketplaceWithHttpInfo($merchant_code, $marketplace_code);
    }

    /**
     * Operation undeclareSourceMarketplaceWithHttpInfo
     *
     * Undeclare this marketplace as source of the offers
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function undeclareSourceMarketplaceWithHttpInfo($merchant_code, $marketplace_code)
    {
        $returnType = '';
        $request = $this->undeclareSourceMarketplaceRequest($merchant_code, $marketplace_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 412:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation undeclareSourceMarketplaceAsync
     *
     * Undeclare this marketplace as source of the offers
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function undeclareSourceMarketplaceAsync($merchant_code, $marketplace_code)
    {
        return $this->undeclareSourceMarketplaceAsyncWithHttpInfo($merchant_code, $marketplace_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation undeclareSourceMarketplaceAsyncWithHttpInfo
     *
     * Undeclare this marketplace as source of the offers
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function undeclareSourceMarketplaceAsyncWithHttpInfo($merchant_code, $marketplace_code)
    {
        $returnType = '';
        $request = $this->undeclareSourceMarketplaceRequest($merchant_code, $marketplace_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'undeclareSourceMarketplace'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $marketplace_code The marketplace code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function undeclareSourceMarketplaceRequest($merchant_code, $marketplace_code)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling undeclareSourceMarketplace'
            );
        }
        // verify the required parameter 'marketplace_code' is set
        if ($marketplace_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $marketplace_code when calling undeclareSourceMarketplace'
            );
        }

        $resourcePath = '/merchant/marketplaces/v1/{merchantCode}/{marketplaceCode}/undeclareOffersSource';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($marketplace_code !== null) {
            $resourcePath = str_replace(
                '{' . 'marketplaceCode' . '}',
                ObjectSerializer::toPathValue($marketplace_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
