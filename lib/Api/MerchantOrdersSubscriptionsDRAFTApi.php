<?php
/**
 * MerchantOrdersSubscriptionsDRAFTApi
 * PHP version 5
 *
 * @category Class
 * @package  IMN\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IMN  API
 *
 * # The REST API of IMN system  ## Overview  The REST APIs provide programmatic access to read and write IMN data.   Basically, with this API you will be able to do everything like you were with your browser on https://go.imn.io !    The main features are:  - Register and manage your merchant account  - Declare your source marketplace to get your offers  - Configure your marketplace api credential  - Define the target marketplaces you want to go to, then you will be able to configure:   - the pricing setting    - the shipping settings  - ...and more!      ## Things to keep in mind  ### API Rate Limits  - The IMN REST API is limited to 100 calls/minute.    ### Media type  The default media type for requests and responses is application/json. Where noted, some operations support other content types. If no additional content type is mentioned for a specific operation, then the media type is application/json.    ### Required content type  The required and default encoding for the request and responses is UTF8.    ### Required date time format  All our date time are formatted in ISO 8601 format: 2014-06-24T16:25:00Z.    ### Base URL  The Base URL of the IMN API Order Management REST API conforms to the following template.    https://api.imn.io    All URLs returned by the IMN API are relative to this base URL, and all requests to the REST API must use this base URL template.    You can test our API on https://api-docs.imn.io/swagger-ui\\\\  You can contact us on [gitter, #IMN/API](https://gitter.im/IMN/API)
 *
 * OpenAPI spec version: 1.0
 * Contact: support@imn.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace IMN\Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use IMN\Swagger\Client\ApiException;
use IMN\Swagger\Client\Configuration;
use IMN\Swagger\Client\HeaderSelector;
use IMN\Swagger\Client\ObjectSerializer;

/**
 * MerchantOrdersSubscriptionsDRAFTApi Class Doc Comment
 *
 * @category Class
 * @package  IMN\Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MerchantOrdersSubscriptionsDRAFTApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation activateSubscription
     *
     * Activate a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id id (required)
     * @param  string $x_hook_secret x_hook_secret (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \IMN\Swagger\Client\Model\Subscription
     */
    public function activateSubscription($merchant_code, $id, $x_hook_secret)
    {
        list($response) = $this->activateSubscriptionWithHttpInfo($merchant_code, $id, $x_hook_secret);
        return $response;
    }

    /**
     * Operation activateSubscriptionWithHttpInfo
     *
     * Activate a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id (required)
     * @param  string $x_hook_secret (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \IMN\Swagger\Client\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function activateSubscriptionWithHttpInfo($merchant_code, $id, $x_hook_secret)
    {
        $returnType = '\IMN\Swagger\Client\Model\Subscription';
        $request = $this->activateSubscriptionRequest($merchant_code, $id, $x_hook_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\Subscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation activateSubscriptionAsync
     *
     * Activate a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id (required)
     * @param  string $x_hook_secret (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activateSubscriptionAsync($merchant_code, $id, $x_hook_secret)
    {
        return $this->activateSubscriptionAsyncWithHttpInfo($merchant_code, $id, $x_hook_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation activateSubscriptionAsyncWithHttpInfo
     *
     * Activate a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id (required)
     * @param  string $x_hook_secret (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function activateSubscriptionAsyncWithHttpInfo($merchant_code, $id, $x_hook_secret)
    {
        $returnType = '\IMN\Swagger\Client\Model\Subscription';
        $request = $this->activateSubscriptionRequest($merchant_code, $id, $x_hook_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'activateSubscription'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id (required)
     * @param  string $x_hook_secret (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function activateSubscriptionRequest($merchant_code, $id, $x_hook_secret)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling activateSubscription'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling activateSubscription'
            );
        }
        // verify the required parameter 'x_hook_secret' is set
        if ($x_hook_secret === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_hook_secret when calling activateSubscription'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/subscriptions/{id}/activate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_hook_secret !== null) {
            $headerParams['X-Hook-Secret'] = ObjectSerializer::toHeaderValue($x_hook_secret);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSubscription
     *
     * Creates a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  \IMN\Swagger\Client\Model\CreateSubscriptionRequest $request request (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \IMN\Swagger\Client\Model\Subscription
     */
    public function createSubscription($merchant_code, $request)
    {
        list($response) = $this->createSubscriptionWithHttpInfo($merchant_code, $request);
        return $response;
    }

    /**
     * Operation createSubscriptionWithHttpInfo
     *
     * Creates a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  \IMN\Swagger\Client\Model\CreateSubscriptionRequest $request (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \IMN\Swagger\Client\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSubscriptionWithHttpInfo($merchant_code, $request)
    {
        $returnType = '\IMN\Swagger\Client\Model\Subscription';
        $request = $this->createSubscriptionRequest($merchant_code, $request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\Subscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSubscriptionAsync
     *
     * Creates a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  \IMN\Swagger\Client\Model\CreateSubscriptionRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionAsync($merchant_code, $request)
    {
        return $this->createSubscriptionAsyncWithHttpInfo($merchant_code, $request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSubscriptionAsyncWithHttpInfo
     *
     * Creates a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  \IMN\Swagger\Client\Model\CreateSubscriptionRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSubscriptionAsyncWithHttpInfo($merchant_code, $request)
    {
        $returnType = '\IMN\Swagger\Client\Model\Subscription';
        $request = $this->createSubscriptionRequest($merchant_code, $request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSubscription'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  \IMN\Swagger\Client\Model\CreateSubscriptionRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSubscriptionRequest($merchant_code, $request)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling createSubscription'
            );
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling createSubscription'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/subscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deactivateSubscription
     *
     * Deactivate a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id id (required)
     * @param  string $x_hook_secret x_hook_secret (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \IMN\Swagger\Client\Model\Subscription
     */
    public function deactivateSubscription($merchant_code, $id, $x_hook_secret)
    {
        list($response) = $this->deactivateSubscriptionWithHttpInfo($merchant_code, $id, $x_hook_secret);
        return $response;
    }

    /**
     * Operation deactivateSubscriptionWithHttpInfo
     *
     * Deactivate a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id (required)
     * @param  string $x_hook_secret (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \IMN\Swagger\Client\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function deactivateSubscriptionWithHttpInfo($merchant_code, $id, $x_hook_secret)
    {
        $returnType = '\IMN\Swagger\Client\Model\Subscription';
        $request = $this->deactivateSubscriptionRequest($merchant_code, $id, $x_hook_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\Subscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deactivateSubscriptionAsync
     *
     * Deactivate a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id (required)
     * @param  string $x_hook_secret (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deactivateSubscriptionAsync($merchant_code, $id, $x_hook_secret)
    {
        return $this->deactivateSubscriptionAsyncWithHttpInfo($merchant_code, $id, $x_hook_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deactivateSubscriptionAsyncWithHttpInfo
     *
     * Deactivate a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id (required)
     * @param  string $x_hook_secret (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deactivateSubscriptionAsyncWithHttpInfo($merchant_code, $id, $x_hook_secret)
    {
        $returnType = '\IMN\Swagger\Client\Model\Subscription';
        $request = $this->deactivateSubscriptionRequest($merchant_code, $id, $x_hook_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deactivateSubscription'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id (required)
     * @param  string $x_hook_secret (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deactivateSubscriptionRequest($merchant_code, $id, $x_hook_secret)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling deactivateSubscription'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deactivateSubscription'
            );
        }
        // verify the required parameter 'x_hook_secret' is set
        if ($x_hook_secret === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_hook_secret when calling deactivateSubscription'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/subscriptions/{id}/deactivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_hook_secret !== null) {
            $headerParams['X-Hook-Secret'] = ObjectSerializer::toHeaderValue($x_hook_secret);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteSubscription
     *
     * Delete a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id id (required)
     * @param  string $x_hook_secret x_hook_secret (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteSubscription($merchant_code, $id, $x_hook_secret)
    {
        $this->deleteSubscriptionWithHttpInfo($merchant_code, $id, $x_hook_secret);
    }

    /**
     * Operation deleteSubscriptionWithHttpInfo
     *
     * Delete a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id (required)
     * @param  string $x_hook_secret (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteSubscriptionWithHttpInfo($merchant_code, $id, $x_hook_secret)
    {
        $returnType = '';
        $request = $this->deleteSubscriptionRequest($merchant_code, $id, $x_hook_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteSubscriptionAsync
     *
     * Delete a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id (required)
     * @param  string $x_hook_secret (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubscriptionAsync($merchant_code, $id, $x_hook_secret)
    {
        return $this->deleteSubscriptionAsyncWithHttpInfo($merchant_code, $id, $x_hook_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteSubscriptionAsyncWithHttpInfo
     *
     * Delete a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id (required)
     * @param  string $x_hook_secret (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteSubscriptionAsyncWithHttpInfo($merchant_code, $id, $x_hook_secret)
    {
        $returnType = '';
        $request = $this->deleteSubscriptionRequest($merchant_code, $id, $x_hook_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteSubscription'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id (required)
     * @param  string $x_hook_secret (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteSubscriptionRequest($merchant_code, $id, $x_hook_secret)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling deleteSubscription'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteSubscription'
            );
        }
        // verify the required parameter 'x_hook_secret' is set
        if ($x_hook_secret === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_hook_secret when calling deleteSubscription'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/subscriptions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_hook_secret !== null) {
            $headerParams['X-Hook-Secret'] = ObjectSerializer::toHeaderValue($x_hook_secret);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscription
     *
     * Get a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id id (required)
     * @param  string $x_hook_secret x_hook_secret (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \IMN\Swagger\Client\Model\Subscription
     */
    public function getSubscription($merchant_code, $id, $x_hook_secret)
    {
        list($response) = $this->getSubscriptionWithHttpInfo($merchant_code, $id, $x_hook_secret);
        return $response;
    }

    /**
     * Operation getSubscriptionWithHttpInfo
     *
     * Get a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id (required)
     * @param  string $x_hook_secret (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \IMN\Swagger\Client\Model\Subscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionWithHttpInfo($merchant_code, $id, $x_hook_secret)
    {
        $returnType = '\IMN\Swagger\Client\Model\Subscription';
        $request = $this->getSubscriptionRequest($merchant_code, $id, $x_hook_secret);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\Subscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscriptionAsync
     *
     * Get a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id (required)
     * @param  string $x_hook_secret (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionAsync($merchant_code, $id, $x_hook_secret)
    {
        return $this->getSubscriptionAsyncWithHttpInfo($merchant_code, $id, $x_hook_secret)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionAsyncWithHttpInfo
     *
     * Get a subscription to the orders
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id (required)
     * @param  string $x_hook_secret (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionAsyncWithHttpInfo($merchant_code, $id, $x_hook_secret)
    {
        $returnType = '\IMN\Swagger\Client\Model\Subscription';
        $request = $this->getSubscriptionRequest($merchant_code, $id, $x_hook_secret);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscription'
     *
     * @param  string $merchant_code The merchant code (required)
     * @param  string $id (required)
     * @param  string $x_hook_secret (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubscriptionRequest($merchant_code, $id, $x_hook_secret)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling getSubscription'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getSubscription'
            );
        }
        // verify the required parameter 'x_hook_secret' is set
        if ($x_hook_secret === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_hook_secret when calling getSubscription'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/subscriptions/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_hook_secret !== null) {
            $headerParams['X-Hook-Secret'] = ObjectSerializer::toHeaderValue($x_hook_secret);
        }

        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSubscriptionList
     *
     * Get the subscription list
     *
     * @param  string $merchant_code The merchant code (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \IMN\Swagger\Client\Model\Subscription[]
     */
    public function getSubscriptionList($merchant_code)
    {
        list($response) = $this->getSubscriptionListWithHttpInfo($merchant_code);
        return $response;
    }

    /**
     * Operation getSubscriptionListWithHttpInfo
     *
     * Get the subscription list
     *
     * @param  string $merchant_code The merchant code (required)
     *
     * @throws \IMN\Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \IMN\Swagger\Client\Model\Subscription[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getSubscriptionListWithHttpInfo($merchant_code)
    {
        $returnType = '\IMN\Swagger\Client\Model\Subscription[]';
        $request = $this->getSubscriptionListRequest($merchant_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\Subscription[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\IMN\Swagger\Client\Model\ErrorResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSubscriptionListAsync
     *
     * Get the subscription list
     *
     * @param  string $merchant_code The merchant code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionListAsync($merchant_code)
    {
        return $this->getSubscriptionListAsyncWithHttpInfo($merchant_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSubscriptionListAsyncWithHttpInfo
     *
     * Get the subscription list
     *
     * @param  string $merchant_code The merchant code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSubscriptionListAsyncWithHttpInfo($merchant_code)
    {
        $returnType = '\IMN\Swagger\Client\Model\Subscription[]';
        $request = $this->getSubscriptionListRequest($merchant_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSubscriptionList'
     *
     * @param  string $merchant_code The merchant code (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSubscriptionListRequest($merchant_code)
    {
        // verify the required parameter 'merchant_code' is set
        if ($merchant_code === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $merchant_code when calling getSubscriptionList'
            );
        }

        $resourcePath = '/merchant/orders/v1/{merchantCode}/subscriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($merchant_code !== null) {
            $resourcePath = str_replace(
                '{' . 'merchantCode' . '}',
                ObjectSerializer::toPathValue($merchant_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
